{
	"jobConfig": {
		"name": "Spotify_Preprocessing-copy",
		"description": "",
		"role": "arn:aws:iam::666243375423:role/NguyenTNH4-role-glue",
		"command": "glueetl",
		"version": "4.0",
		"runtime": null,
		"workerType": "G.1X",
		"numberOfWorkers": 10,
		"maxCapacity": 10,
		"jobRunQueuingEnabled": false,
		"maxRetries": 0,
		"timeout": 2880,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "Spotify_Preprocessing-copy.py",
		"scriptLocation": "s3://aws-glue-assets-666243375423-ap-southeast-1/scripts/",
		"language": "python-3",
		"spark": true,
		"sparkConfiguration": "standard",
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-08-21T07:47:00.030Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-666243375423-ap-southeast-1/temporary/",
		"logging": true,
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"metrics": true,
		"observabilityMetrics": true,
		"bookmark": "job-bookmark-disable",
		"sparkPath": "s3://aws-glue-assets-666243375423-ap-southeast-1/sparkHistoryLogs/",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\r\nfrom awsglue.transforms import *\r\nfrom awsglue.utils import getResolvedOptions\r\nfrom pyspark.context import SparkContext\r\nfrom awsglue.context import GlueContext\r\nfrom awsglue.job import Job\r\nfrom awsglue.dynamicframe import DynamicFrameCollection\r\nfrom awsglue.dynamicframe import DynamicFrame\r\n\r\n# Script generated for node Remove symbols artists\r\ndef MyTransform(glueContext, dfc) -> DynamicFrame:\r\n    from pyspark.sql.functions import regexp_replace, col, udf, to_date\r\n    from pyspark.sql.types import StringType\r\n    from sklearn.preprocessing import LabelEncoder, MinMaxScaler\r\n    import ast\r\n    import pandas as pd\r\n    import numpy as np\r\n    from pyspark.sql import SparkSession\r\n\r\n    # Convert the input DynamicFrame to a DataFrame\r\n    df = dfc.select(list(dfc.keys())[0]).toDF()\r\n\r\n    # Perform the transformation to remove symbols from the 'artists' column\r\n    df = df.withColumn('artists', regexp_replace('artists', r\"[\\[\\]']\", ''))\r\n\r\n    # UDF to extract first genre or return 'unknown'\r\n    def extract_first_genre(genre_list):\r\n        genre_list = ast.literal_eval(genre_list)\r\n        return genre_list[0] if genre_list else \"unknown\"\r\n\r\n    extract_genre_udf = udf(extract_first_genre, StringType())\r\n\r\n    # Apply the UDF to the 'artist_genres' column\r\n    df = df.withColumn('artist_genres', extract_genre_udf(col('artist_genres')))\r\n\r\n    # Drop duplicates\r\n    df = df.dropDuplicates()\r\n\r\n    # Convert 'explicit' column to integer\r\n    df = df.withColumn('explicit', col('explicit').cast('int'))\r\n\r\n    # Convert 'release_date' to datetime\r\n    df = df.withColumn('release_date', to_date(col('release_date')))\r\n\r\n    # Apply Label Encoding on 'artist_genres'\r\n    spark = SparkSession.builder.getOrCreate()\r\n    pandas_df = df.toPandas()\r\n    label_encoder = LabelEncoder()\r\n    pandas_df['artist_genres_encoded'] = label_encoder.fit_transform(pandas_df['artist_genres'])\r\n\r\n    # Select numeric features\r\n    features = pandas_df.select_dtypes(np.number).columns\r\n\r\n    # Apply MinMaxScaler\r\n    scaler = MinMaxScaler()\r\n    pandas_df[features] = scaler.fit_transform(pandas_df[features])\r\n\r\n    # Convert the pandas DataFrame back to Spark DataFrame\r\n    df = spark.createDataFrame(pandas_df)\r\n\r\n    # Convert the transformed DataFrame back to a DynamicFrame\r\n    transformed_dynamic_frame = DynamicFrame.fromDF(df, glueContext, \"transformed_dynamic_frame\")\r\n\r\n    return transformed_dynamic_frame\r\n\r\nargs = getResolvedOptions(sys.argv, ['JOB_NAME'])\r\nsc = SparkContext()\r\nglueContext = GlueContext(sc)\r\nspark = glueContext.spark_session\r\njob = Job(glueContext)\r\njob.init(args['JOB_NAME'], args)\r\n\r\n# Script generated for node Data\r\nData_node1724212075306 = glueContext.create_dynamic_frame.from_options(\r\n    format_options={\"quoteChar\": \"\\\"\", \"withHeader\": True, \"separator\": \",\", \"optimizePerformance\": False},\r\n    connection_type=\"s3\",\r\n    format=\"csv\",\r\n    connection_options={\"paths\": [\"s3://batch10-nguyentnh-proj-athena/Unsaved/2024/08/16/5db03a81-6082-47c1-9e80-678e6e95fcdc.csv\"], \"recurse\": True},\r\n    transformation_ctx=\"Data_node1724212075306\"\r\n)\r\n\r\n# Script generated for node Select relevant features\r\nSelectrelevantfeatures_node1724216209451 = SelectFields.apply(\r\n    frame=Data_node1724212075306,\r\n    paths=[\"followers\", \"instrumentalness\", \"danceability\", \"explicit\", \"key\", \"artist_genres\", \"artists\", \"track_name\", \"release_date\", \"duration_sec\", \"track_popularity\", \"album_name\", \"album_popularity\", \"label\", \"liveness\", \"tempo\", \"acousticness\", \"speechiness\", \"mode\", \"loudness\", \"energy\", \"valence\", \"time_signature\"],\r\n    transformation_ctx=\"Selectrelevantfeatures_node1724216209451\"\r\n)\r\n\r\n# Script generated for node Change Schema\r\nChangeSchema_node1724218707491 = ApplyMapping.apply(\r\n    frame=Selectrelevantfeatures_node1724216209451,\r\n    mappings=[\r\n        (\"followers\", \"string\", \"followers\", \"int\"),\r\n        (\"instrumentalness\", \"string\", \"instrumentalness\", \"float\"),\r\n        (\"danceability\", \"string\", \"danceability\", \"float\"),\r\n        (\"explicit\", \"string\", \"explicit\", \"boolean\"),\r\n        (\"key\", \"string\", \"key\", \"int\"),\r\n        (\"artist_genres\", \"string\", \"artist_genres\", \"string\"),\r\n        (\"artists\", \"string\", \"artists\", \"string\"),\r\n        (\"track_name\", \"string\", \"track_name\", \"string\"),\r\n        (\"release_date\", \"string\", \"release_date\", \"date\"),\r\n        (\"duration_sec\", \"string\", \"duration_sec\", \"float\"),\r\n        (\"track_popularity\", \"string\", \"track_popularity\", \"int\"),\r\n        (\"album_name\", \"string\", \"album_name\", \"string\"),\r\n        (\"album_popularity\", \"string\", \"album_popularity\", \"int\"),\r\n        (\"label\", \"string\", \"label\", \"string\"),\r\n        (\"liveness\", \"string\", \"liveness\", \"float\"),\r\n        (\"tempo\", \"string\", \"tempo\", \"float\"),\r\n        (\"acousticness\", \"string\", \"acousticness\", \"float\"),\r\n        (\"speechiness\", \"string\", \"speechiness\", \"float\"),\r\n        (\"mode\", \"string\", \"mode\", \"int\"),\r\n        (\"loudness\", \"string\", \"loudness\", \"float\"),\r\n        (\"energy\", \"string\", \"energy\", \"float\"),\r\n        (\"valence\", \"string\", \"valence\", \"float\"),\r\n        (\"time_signature\", \"string\", \"time_signature\", \"int\")\r\n    ],\r\n    transformation_ctx=\"ChangeSchema_node1724218707491\"\r\n)\r\n\r\n# Script generated for node Remove symbols artists\r\nRemovesymbolsartists_node1724216822845 = MyTransform(\r\n    glueContext,\r\n    DynamicFrameCollection({\"ChangeSchema_node1724218707491\": ChangeSchema_node1724218707491}, glueContext)\r\n)\r\n\r\n# Script generated for node S3 Sink\r\nglueContext.write_dynamic_frame.from_options(\r\n    frame=Removesymbolsartists_node1724216822845,\r\n    connection_type=\"s3\",\r\n    connection_options={\"path\": \"s3://batch10-nguyentnh-proj/processed/\"},\r\n    format=\"parquet\",\r\n    transformation_ctx=\"S3Sink\"\r\n)\r\n\r\njob.commit()\r\n"
}